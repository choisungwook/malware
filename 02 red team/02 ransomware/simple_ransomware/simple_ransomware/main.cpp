#include <Windows.h>
#include <stdio.h>
#include <iostream>
#define CHUNK_SIZE 1024

int encrypt(LPCTSTR src, LPCTSTR dst)
{
    /* 
        create a aes key and encrypt file.
        encrypted file data is saved to new file which name is dst varabile.
        return 0: encrypt is succeed, not 0: fail

        reference: https://gist.github.com/hasherezade/2860d94910c5c5fb776edadf57f0bef6
    */

    wchar_t info[] = L"Microsoft Enhanced RSA and AES Cryptographic Provider";
    HANDLE hSrcFile = INVALID_HANDLE_VALUE;
    HANDLE hDstFile = INVALID_HANDLE_VALUE;
    HCRYPTPROV hCryptProv = NULL;
    HCRYPTHASH hHash = NULL;
    HCRYPTKEY hKey = NULL;
    DWORD dwStatus = 0;
    int result = 0;
    DWORD lengthOfencrypted = 0;

    /*
        First stage
        Create the AES key
    */

    if (!CryptAcquireContextW(&hCryptProv, NULL, info, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        dwStatus = GetLastError();
        printf("[Error 1] CryptAcquireContext failed: %x\n", dwStatus);
        CryptReleaseContext(hCryptProv, 0);
        return dwStatus;
    }
    if (!CryptCreateHash(hCryptProv, CALG_SHA_256, 0, 0, &hHash)) {
        dwStatus = GetLastError();
        printf("[Error 2] CryptCreateHash failed: %x\n", dwStatus);
        CryptReleaseContext(hCryptProv, 0);
        return dwStatus;
    }

    // Please configure a default_key what you want
    wchar_t default_key[] = L"hello world";
    wchar_t* key_str = default_key;
    size_t len = lstrlenW(key_str);

    if (!CryptHashData(hHash, (BYTE*)key_str, len, 0)) {
        dwStatus = GetLastError();
        printf("[Error 3]CryptHashData failed: %x\n", dwStatus);
        CryptReleaseContext(hCryptProv, 0);
        CryptDestroyHash(hHash);
        return dwStatus;
    }

    // create a aes key
    if (!CryptDeriveKey(hCryptProv, CALG_AES_128, hHash, 0, &hKey)) {
        dwStatus = GetLastError();
        printf("[Error 4]CryptDeriveKey failed: %x\n", dwStatus);
        CryptReleaseContext(hCryptProv, 0);
        CryptDestroyHash(hHash);
        return dwStatus;
    }

    printf("[+] Create key Success\n");

    /*
        Second stage
        Encrypt file and save data to new file.
    */

    hSrcFile = CreateFile(
        src,
        FILE_READ_DATA,
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL);

    if (hSrcFile == INVALID_HANDLE_VALUE) {
        printf("[Error 5] Createfile\n");
        result = -1;
        goto Exit_MyEncryptFile;
    }

    hDstFile = CreateFile(
        dst,
        FILE_WRITE_DATA,
        FILE_SHARE_READ,
        NULL,
        OPEN_ALWAYS,
        FILE_ATTRIBUTE_NORMAL,
        NULL);

    if (hSrcFile == INVALID_HANDLE_VALUE) {
        printf("[Error 6] Createfile\n");
        result = -1;
        goto Exit_MyEncryptFile;
    }

    // Read the file
    const size_t chunk_size = CHUNK_SIZE;
    BYTE chunk[chunk_size] = { 0 };
    DWORD out_len = 0;

    BOOL isFinal = FALSE;
    DWORD readTotalSize = 0;

    DWORD inputSize = GetFileSize(hSrcFile, NULL);
    BOOL bResult = FALSE;

    while (bResult = ReadFile(hSrcFile, chunk, chunk_size, &out_len, NULL)) {
        if (0 == out_len) {
            break;
        }
        readTotalSize += out_len;
        if (readTotalSize == inputSize) {
            isFinal = TRUE;
        }
        
        if (!CryptEncrypt(hKey, NULL, isFinal, 0, chunk, &out_len, chunk_size)) {
            printf("[Error 7]CryptEncrypt failed\n");
            break;
        }
        
        DWORD written = 0;
        if (!WriteFile(hDstFile, chunk, out_len, &written, NULL)) {
            printf("[Error 8]writing failed!\n");
            break;
        }
        memset(chunk, 0, chunk_size);
    }


Exit_MyEncryptFile:
    CryptReleaseContext(hCryptProv, 0);
    CryptDestroyKey(hKey);
    CryptDestroyHash(hHash);
    if(hSrcFile != INVALID_HANDLE_VALUE)
        CloseHandle(hSrcFile);
    if (hDstFile != INVALID_HANDLE_VALUE)
        CloseHandle(hDstFile);
    return result;
}

int main()
{
    LPCTSTR target = L"C:\\Users\\IEUser\\Desktop\\targetfile.txt";
    LPCTSTR encrypted_file = L"C:\\Users\\IEUser\\Desktop\\targetfile.my";

    int result = encrypt(target, encrypted_file);
    
    if (result == 0) {
        printf("[+] Done\n");
    }

    system("pause");
	return 0;
}