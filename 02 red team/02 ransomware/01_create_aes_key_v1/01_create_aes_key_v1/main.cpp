#define _CRT_SECURE_NO_WARNINGS
#include <Windows.h>
#include <wincrypt.h>
#include <stdio.h>
#define AESKEYALS CALG_AES_128
#define AESKEYLEN 128

int save_key(HCRYPTKEY* hKey, wchar_t* filename) {
    /*
        save the aes key
        return is zero -> failed
        return is not zero -> success
    */

    DWORD keylen = AESKEYLEN;
    DWORD written = 0;

    FILE* hDstFile = fopen((const char*)filename, "w");

    if (hDstFile == INVALID_HANDLE_VALUE) {
        printf("[-] 1. Createfile is failed %x \n", GetLastError());
        return 0;
    }

    // key to file
    if (!fwrite(hKey, keylen, 1, hDstFile)) {
        printf("[-] 2. WriteFile is failed \n");
        CloseHandle(hDstFile);
        return 0;
    }

    printf("[+] saving key is done \n");
    CloseHandle(hDstFile);

    return 1;
}

int main(int argc, wchar_t* argv[])
{
    /*
        reference: https://forum.sources.ru/index.php?showtopic=342707
    */

    HCRYPTPROV hCryptProv = NULL;
    HCRYPTKEY hKey;

    if (argc < 2) {
        printf("params: <output file> \n");
        system("pause");
        return 0;
    }

    wchar_t* filename = argv[1];

    CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT);
    if (!CryptGenKey(hCryptProv, AESKEYALS, CRYPT_EXPORTABLE, &hKey)) {
        printf("[-] 3. CryptGenKey is failed  \n");
        CryptReleaseContext(hCryptProv, 0);
        return -1;
    }

    DWORD keyLen;
    DWORD lenLen = sizeof(keyLen);
    if (!CryptGetKeyParam(hKey, KP_KEYLEN, (BYTE*)&keyLen, &lenLen, 0)) {
        printf("[-] 4. CryptGetKeyParam is failed  \n");
        CryptReleaseContext(hCryptProv, 0);
        CryptDestroyKey(hKey);
        return -1;
    }
    printf("key length is %d\n", keyLen);
    printf("%x\n", hKey);

    if (!save_key(&hKey, filename)) {
        CryptReleaseContext(hCryptProv, 0);
        CryptDestroyKey(hKey);
        return -1;
    }

    return 0;
}