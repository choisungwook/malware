#-*- coding: utf-8 -*-
#import raw_features
import pefile
import sys
import logging
import csv
from src import conf, raw_features, extra_features

mylogger = logging.getLogger(__name__)
mylogger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
mylogger.addHandler(ch)

# csv 파일 이름
output = 'test_features.csv'

try:
    target = conf.testtarget
    pe = pefile.PE(conf.testtarget)
    pe_dict = pe.dump_dict()

    '''
        PE포맷의 DOS헤더 추출
        실패시 프로그램 종료
    '''
    dos_header = raw_features.extract_dos_header(pe)
    if dos_header is None:
        mylogger.info('Extracting dos_header is failed')
        sys.exit(-1)

    file_header = raw_features.extract_file_header(pe)
    if file_header is None:
        mylogger.info('Extracting file_header is failed')
        sys.exit(-1)

    # OPTIONAL 헤더
    optional_header = raw_features.extract_optional_header(pe)
    if optional_header is None:
        mylogger.info('Extracting optional_header is failed')
        sys.exit(-1)

    # fileinfo
    fileinfo = raw_features.extract_fileinfo(pe)

    # 섹션 이름 유무 추출
    section_header_bool_names = extra_features.get_count_suspicious_sections(pe)
    if section_header_bool_names is None:
        mylogger.info('Extracting section_header_names is failed')
        sys.exit(-1)

    # 파일 엔트로피
    binarydata = open(conf.testtarget, 'rb').read()
    file_entropy = extra_features.get_entropy(binarydata)

    # 문자열 추출
    strings = extra_features.extract_strings(target)

    # 추출한 특성을 파일로 쓰기
    with open(output, 'wt') as f:
        writer = csv.writer(f, lineterminator='\n')

        # 헤더
        columns = list(dos_header.keys()) + \
                  list(optional_header.keys()) + \
                  list(file_header.keys()) + \
                  list(section_header_bool_names.keys()) + \
                  ['file_entropy'] \
                  + list(fileinfo.keys()) + \
                  ['url'] + ['ip'] + ['fuzzing']

        # 추출한 특성
        features = list(dos_header.values()) + \
                   list(optional_header.values()) + \
                   list(file_header.values()) + \
                   list(section_header_bool_names.values()) + \
                   [file_entropy] + \
                   list(fileinfo.values()) + \
                   [strings['url']] + [strings['ip']] +  [strings['fuzzing'].values()]

        writer.writerow(columns)
        writer.writerow(features)

except Exception as e:
    mylogger.debug(e)
    mylogger.info('Load PE is failed')

mylogger.debug('Extracting is Done')