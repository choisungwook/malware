#-*- coding: utf-8 -*-
import pefile
import logging
import collections
from . import conf, pefile_utils

mylogger = logging.getLogger(__name__)
mylogger.setLevel(logging.DEBUG)
sh = logging.StreamHandler()
mylogger.addHandler(sh)

def extract_dos_header(pe):
    '''
    PE헤더의 DOS헤더 추출 함수
    :param pefile의 pe
    :return 추출한 DOS헤더의 리스트
    '''
    try:
        dos_header = {}
        pe_dict = pe.dump_dict()

        pe_header = pe_dict['DOS_HEADER']
        del pe_header['Structure']

        for key, value in pe_header.items():
            dos_header[key] = value['Value']

        dos_header['e_res'] = int.from_bytes(pe.DOS_HEADER.e_res, byteorder='little')
        dos_header['e_res2'] = int.from_bytes(pe.DOS_HEADER.e_res2, byteorder='little')

        return dos_header

    except Exception as e:
        mylogger.debug(e)
        return None

def extract_optional_header(pe):
    '''
    PE헤더의 OPTIONAL 추출 함수
    :param pefile의 pe
    :return 추출한 OPTIONAL헤더 리스트
    '''
    try:
        optional_header = {}
        pe_dict = pe.dump_dict()

        pe_header = pe_dict['OPTIONAL_HEADER']
        del pe_header['Structure']

        for key, value in pe_header.items():
            optional_header[key] = value['Value']

        return optional_header

    except Exception as e:
        mylogger.debug(e)
        return None

def extract_file_header(pe):
    '''
    FILE헤더 추출
    :param pe:
    :return:추출한 FILE헤더 리스트
    '''
    try:
        file_header = {}
        pe_dict = pe.dump_dict()

        pe_header = pe_dict['FILE_HEADER']
        del pe_header['Structure']

        for key, value in pe_header.items():
            file_header[key] = value['Value']

        file_header = pefile_utils.get_peheader(pe, 'FILE_HEADER')
        file_header['TimeDateStamp'] = pe.FILE_HEADER.TimeDateStamp

        return file_header

    except Exception as e:
        mylogger.debug(e)
        return None

def extract_fileinfo(pe):
    '''
    파일 정보 추출(마우스 오른쪽 -> 등록정보)
    '''
    try:
        version_information = {
            'VS_VERSIONINFO_Length': 0,
            'VS_VERSIONINFO_ValueLength': 0,
            'VS_VERSIONINFO_Type': 0,
            'VS_FIXEDFILEINFO_Signature': 0,
            'VS_FIXEDFILEINFO_StrucVersion': 0,
            'VS_FIXEDFILEINFO_FileVersionMS': 0,
            'VS_FIXEDFILEINFO_FileVersionLS': 0,
            'VS_FIXEDFILEINFO_ProductVersionMS': 0,
            'VS_FIXEDFILEINFO_ProductVersionLS': 0,
            'VS_FIXEDFILEINFO_FileFlagsMask': 0,
            'VS_FIXEDFILEINFO_FileFlags': 0,
            'VS_FIXEDFILEINFO_FileOS': 0,
            'VS_FIXEDFILEINFO_FileType': 0,
            'VS_FIXEDFILEINFO_FileSubtype': 0,
            'VS_FIXEDFILEINFO_FileDateMS': 0,
            'VS_FIXEDFILEINFO_FileDateLS': 0,
        }
        pe_dict = pe.dump_dict()

        pe_header = pe_dict['Version Information']

        for entry in pe_header[0]:
            title = ''
            for key, value in entry.items():
                if isinstance(value, str):
                    title = value
                    continue

                version_information[title + '_' + key] = value['Value']

        return version_information

    except Exception as e:
        mylogger.debug('[Info]fileinfo extracting is failed')
        return version_information

def get_tls_section(pe):
    '''
    tls 섹션 확인
    tls섹션을 가지고 있으면 True 리턴
    '''
    if hasattr(pe, 'DIRECTORY_ENTRY_TLS'):
        return True
    return False