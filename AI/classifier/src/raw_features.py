#-*- coding: utf-8 -*-
import pefile
import logging

mylogger = logging.getLogger('raw_features')
mylogger.setLevel(logging.DEBUG)

def extract_dos_header(pe):
    '''
    PE헤더의 DOS헤더 추출 함수
    :param pefile의 pe
    :return 추출한 DOS헤더의 리스트
    '''
    try:
        IMAGE_DOS_HEADER_data = []

        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_magic)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_cblp)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_cp)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_crlc)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_cparhdr)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_minalloc)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_maxalloc)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_ss)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_sp)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_csum)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_ip)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_cs)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_lfarlc)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_ovno)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_cs)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_res)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_oemid)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_oeminfo)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_res2)
        IMAGE_DOS_HEADER_data.append(pe.DOS_HEADER.e_lfanew)

        return IMAGE_DOS_HEADER_data

    except Exception as e:
        mylogger.debug(e)
        return None

def extract_optional_header(pe):
    '''
    PE헤더의 OPTIONAL 추출 함수
    :param pefile의 pe
    :return 추출한 OPTIONAL헤더 리스트
    '''
    try:
        OPTIONAL_HEADER_data = []

        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.Magic)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MajorLinkerVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MinorLinkerVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfCode)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfInitializedData)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfUninitializedData)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.AddressOfEntryPoint)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.BaseOfCode)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.ImageBase)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SectionAlignment)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.FileAlignment)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MinorOperatingSystemVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MajorImageVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MinorImageVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MajorSubsystemVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.MinorSubsystemVersion)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfImage)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfHeaders)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.CheckSum)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfHeaders)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.Subsystem)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.DllCharacteristics)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfStackReserve)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfStackCommit)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfHeapReserve)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.SizeOfHeapCommit)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.LoaderFlags)
        OPTIONAL_HEADER_data.append(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes)

        return OPTIONAL_HEADER_data

    except Exception as e:
        mylogger.debug(e)
        return None

def extract_file_header(pe):
    '''
    FILE헤더 추출
    :param pe:
    :return:추출한 FILE헤더 리스트
    '''
    try:
        FILE_HEADER_data = []

        FILE_HEADER_data.append(pe.FILE_HEADER.Machine)
        FILE_HEADER_data.append(pe.FILE_HEADER.NumberOfSections)
        FILE_HEADER_data.append(file_creation_year(pe.FILE_HEADER.TimeDateStamp))
        FILE_HEADER_data.append(pe.FILE_HEADER.PointerToSymbolTable)
        FILE_HEADER_data.append(pe.FILE_HEADER.SizeOfOptionalHeader)
        FILE_HEADER_data.append(pe.FILE_HEADER.Characteristics)
        return FILE_HEADER_data

    except Exception as e:
        mylogger.debug(e)
        return None

def file_creation_year(seconds):
    '''
    시간 리턴
    :param seconds:
    :return:
    '''
    return 1970 + ((int(seconds) / 86400) / 365)