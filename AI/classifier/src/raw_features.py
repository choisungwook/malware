#-*- coding: utf-8 -*-
import pefile
import logging
import collections
from . import conf

mylogger = logging.getLogger(__name__)
mylogger.setLevel(logging.DEBUG)
sh = logging.StreamHandler()
mylogger.addHandler(sh)

def extract_dos_header(pe):
    '''
    PE헤더의 DOS헤더 추출 함수
    :param pefile의 pe
    :return 추출한 DOS헤더의 리스트
    '''
    try:
        dos_header = collections.OrderedDict.fromkeys(conf.__IMAGE_DOS_HEADER_format__[1], 0)

        dos_header['H,e_magic'] = pe.DOS_HEADER.e_magic
        dos_header['H,e_cblp'] = pe.DOS_HEADER.e_cblp
        dos_header['H,e_cp'] = pe.DOS_HEADER.e_cp
        dos_header['H,e_crlc'] = pe.DOS_HEADER.e_crlc
        dos_header['H,e_cparhdr'] = pe.DOS_HEADER.e_cparhdr
        dos_header['H,e_minalloc'] = pe.DOS_HEADER.e_minalloc
        dos_header['H,e_maxalloc'] = pe.DOS_HEADER.e_maxalloc
        dos_header['H,e_ss'] = pe.DOS_HEADER.e_ss
        dos_header['H,e_sp'] = pe.DOS_HEADER.e_sp
        dos_header['H,e_csum'] = pe.DOS_HEADER.e_csum
        dos_header['H,e_ip'] = pe.DOS_HEADER.e_ip
        dos_header['H,e_cs'] = pe.DOS_HEADER.e_cs
        dos_header['H,e_lfarlc'] = pe.DOS_HEADER.e_lfarlc
        dos_header['H,e_ovno'] = pe.DOS_HEADER.e_ovno
        dos_header['8s,e_res'] = int.from_bytes(pe.DOS_HEADER.e_res, byteorder='little')
        dos_header['H,e_oemid'] = pe.DOS_HEADER.e_oemid
        dos_header['H,e_oeminfo'] = pe.DOS_HEADER.e_oeminfo
        dos_header['20s,e_res2'] = int.from_bytes(pe.DOS_HEADER.e_res2, byteorder='little')
        dos_header['I,e_lfanew'] = pe.DOS_HEADER.e_lfanew

        return dos_header

    except Exception as e:
        mylogger.debug(e)
        return None

def extract_optional_header(pe):
    '''
    PE헤더의 OPTIONAL 추출 함수
    :param pefile의 pe
    :return 추출한 OPTIONAL헤더 리스트
    '''
    try:
        optional_header = collections.OrderedDict.fromkeys(conf.__IMAGE_OPTIONAL_HEADER_format__[1])

        optional_header['H,Magic'] = pe.OPTIONAL_HEADER.Magic
        optional_header['B,MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        optional_header['B,MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        optional_header['I,SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
        optional_header['I,SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
        optional_header['I,SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
        optional_header['I,AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        optional_header['I,BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
        optional_header['I,BaseOfData'] = pe.OPTIONAL_HEADER.BaseOfData # 64비트는 BaseOfData 필드가 없음
        optional_header['I,ImageBase'] = pe.OPTIONAL_HEADER.ImageBase
        optional_header['I,SectionAlignment'] = pe.OPTIONAL_HEADER.SectionAlignment
        optional_header['I,FileAlignment'] = pe.OPTIONAL_HEADER.FileAlignment
        optional_header['H,MajorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        optional_header['H,MinorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
        optional_header['H,MajorImageVersion'] = pe.OPTIONAL_HEADER.FileAlignment
        optional_header['H,MinorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
        optional_header['H,MajorSubsystemVersion'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        optional_header['H,MinorSubsystemVersion'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
        optional_header['I,Reserved1'] = pe.OPTIONAL_HEADER.FileAlignment
        optional_header['I,SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
        optional_header['I,SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
        optional_header['I,CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
        optional_header['H,Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
        optional_header['H,DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
        optional_header['I,SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        optional_header['I,SizeOfStackCommit'] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        optional_header['I,SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        optional_header['I,SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        optional_header['I,LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
        optional_header['I,NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

        return optional_header

    except Exception as e:
        mylogger.debug(e)
        return None

def extract_file_header(pe):
    '''
    FILE헤더 추출
    :param pe:
    :return:추출한 FILE헤더 리스트
    '''
    try:
        file_header = collections.OrderedDict.fromkeys(conf.__IMAGE_FILE_HEADER_format__[1])

        file_header['H,Machine'] = pe.FILE_HEADER.Machine
        file_header['H,NumberOfSections'] = pe.FILE_HEADER.NumberOfSections
        file_header['I,TimeDateStamp'] = pe.FILE_HEADER.TimeDateStamp
        file_header['I,PointerToSymbolTable'] = pe.FILE_HEADER.PointerToSymbolTable
        file_header['I,NumberOfSymbols'] = pe.FILE_HEADER.NumberOfSymbols
        file_header['H,SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
        file_header['H,Characteristics'] = pe.FILE_HEADER.Characteristics

        return file_header

    except Exception as e:
        mylogger.debug(e)
        return None