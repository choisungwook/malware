#-*- coding: utf-8 -*-
import unittest
import sys
import os
import pefile
import csv
import json
import pandas as pd

sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from src import raw_features, extra_features, conf, fileurl

class Textarea(unittest.TestCase):
    def setUp(self):
        '''
        테스트 시작되기 전 초기화 코드
        '''
        self.target = conf.testtarget
        self.pe = pefile.PE(self.target)
        self.pe_dict = self.pe.dump_dict()

    def test_extract_dos_header(self):
        '''
        DOS헤더 추출 테스트
        '''
        dos_header = raw_features.extract_dos_header(self.pe)

        print('result: {}'.format(dos_header))

    def test_extract_dosheader_And_write_csv(self):
        '''
        DOS헤더를 추출하고 csv파일로 쓰기
        csv 패키지 사용
        '''
        # csv파일 경로
        output = 'dos_header.csv'
        dos_header = raw_features.extract_dos_header(self.pe)

        with open(output, 'wt') as f:
            writer = csv.writer(f, lineterminator='\n')

            # 헤더 쓰기
            writer.writerow(list(dos_header.keys()))

            # 추출한 도스헤더 쓰기
            writer.writerow(list(dos_header.values()))

        print('Test_extract_dosheader_And_write_csv function is Done')

    def test_extract_dosheader_And_write_csv2(self):
        '''
        pandas 사용
        :return:
        '''
        output = 'dos_header.csv'
        dos_header = raw_features.extract_dos_header(self.pe)
        dos_header_df = {}

        for key, value in dos_header.items():
            dos_header_df[key] = [value]

        df_names = dos_header.keys()
        df = pd.DataFrame(dos_header.values() ,columns=df_names, index=None)
        print(df)
        #df.to_csv(output, index=None)

    def test_extract_optional_header_1(self):
        '''
        OPTIONAL헤더 추출 테스트 1
        '''
        optional_header = raw_features.extract_optional_header(self.pe)
        print('result: {}'.format(optional_header))

    def test_extract_optional_header_2(self):
        '''
        1. DOS헤더 + OPTINAL헤더 추출
        2. csv파일에 저장
        '''
        output = 'dos_optional_header.csv'

        dos_header = raw_features.extract_dos_header(self.pe)
        optional_header = raw_features.extract_optional_header(self.pe)

        with open(output, 'wt') as f:
            writer = csv.writer(f, lineterminator='\n')

            # 헤더 쓰기
            writer.writerow(list(dos_header.keys()) +
                            list(optional_header.keys())
                            )

            # DOS 헤더 + OPTIONAL 헤더
            features = list(dos_header.values()) + list(optional_header.values())
            writer.writerow(features)

        print('test_extract_optional_header_2 is Done')

    def test_extract_file_header1(self):
        '''
        FILE 헤더 추출 테스트 1
        OrderDict 변환 테스트
        '''

        file_header = raw_features.extract_file_header(self.pe)
        print('result: {}'.format(file_header))

    def test_extract_file_header2(self):
        '''
        FILE 헤더 추출 테스트 2
        추출한 파일 헤더를 csv파일로 저장
        '''
        output = 'file_header.csv'
        file_header = raw_features.extract_file_header(self.pe)

        with open(output, 'wt') as f:
            writer = csv.writer(f, lineterminator='\n')

            # 헤더
            columns = list(file_header.keys())

            # 값
            features = list(file_header.values())

            writer.writerow(columns)
            writer.writerow(features)

        print('test_extract_file_header2 is Done')

    def test_extract_fileinfo(self):
        '''
        버전 정보 추출
        '''
        version_information = raw_features.extract_fileinfo(self.pe)
        print(version_information)

    def test_extract_fileinfoTocsv(self):
        '''
        1. 버전 정보 추출
        2. 파이 저장
        '''
        output = 'test_versioninformation.csv'
        version_information = raw_features.extract_fileinfo(self.pe)

        with open(output, 'wt') as f:
            writer = csv.writer(f, lineterminator='\n')

            columns = list(version_information.keys())
            features = list(version_information.values())

            writer.writerow(columns)
            writer.writerow(features)

    def test_extract_section_header_1(self):
        '''
        section 헤더 추출 테스트 1
        OrderDict 변환 테스트
        '''
        section_header_names = extra_features.get_count_suspicious_sections(self.pe)
        print(section_header_names)

        print('test_extract_section_header_1 is Done')

    def test_extract_section_header_2(self):
        '''
        section 헤더 추출 테스트 2
        추출한 파일 헤더를 csv파일로 저장
        '''
        output = 'test_section_name.csv'
        section_header_names = extra_features.get_count_suspicious_sections(self.pe)

        with open(output, 'wt') as f:
            writer = csv.writer(f, lineterminator='\n')

            # 헤더
            columns = list(section_header_names.keys())

            # 섹션 이름
            features = list(section_header_names.values())

            writer.writerow(columns)
            writer.writerow(features)

        print('test_extract_section_header_2 is Done')

    def test_entropy(self):
        with  open(self.target, 'rb') as f:
            binarydata = f.read()
            entropy = extra_features.get_entropy(binarydata)
            print(entropy)

        print('test_entropy is Done')

    def test_extract_string(self):
        strings = extra_features.extract_strings(self.target)
        print(strings)
        for key, value in strings.items():
            print('{} {}: {}'.format(key, type(value), value))

    def test_extract_stringTocsv(self):
        output = 'test_strings.csv'
        strings = extra_features.extract_strings(self.target)

        df = pd.DataFrame()

        url_series = pd.Series([strings['url']])
        ip_series = pd.Series([strings['ip']])
        fuzzing_series = pd.Series([strings['fuzzing']])

        df['url'] = url_series
        df['ip'] = ip_series
        df['fuzzing'] = fuzzing_series

        #df.to_csv(output)
        df.to_csv(output, index=None)

    def test_extract_stringTocsv2(self):
        '''
        csv 패키지 사용
        :return:
        '''
        output = 'test_strings.csv'
        strings = extra_features.extract_strings(self.target)

        print(strings['url'])
        with open(output, 'wt') as f:
            writer = csv.writer(f, lineterminator='\n')
            writer.writerow(['url'] + ['ip'] + ['fuzzing'])
            writer.writerow([strings['url']] + [strings['ip']] + [strings['fuzzing'].values()])

    def test_extract_TLSSection(self):
        '''
        TLS섹션이 있는지 확인하는 테스트
        :return:
        '''
        if raw_features.get_tls_section(self.pe):
            print('{} has tls sectin'.format(self.target))

if __name__=='__main__':
    unittest.main()